// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Challenge is a type to represent a Challenge request with an ACME server
type Challenge struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput   `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput   `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec       ChallengeSpecPtrOutput   `pulumi:"spec"`
	Status     ChallengeStatusPtrOutput `pulumi:"status"`
}

// NewChallenge registers a new resource with the given unique name, arguments, and options.
func NewChallenge(ctx *pulumi.Context,
	name string, args *ChallengeArgs, opts ...pulumi.ResourceOption) (*Challenge, error) {
	if args == nil {
		args = &ChallengeArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("acme.cert-manager.io/v1alpha2")
	args.Kind = pulumi.StringPtr("Challenge")
	var resource Challenge
	err := ctx.RegisterResource("kubernetes:acme.cert-manager.io/v1alpha2:Challenge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallenge gets an existing Challenge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallenge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengeState, opts ...pulumi.ResourceOption) (*Challenge, error) {
	var resource Challenge
	err := ctx.ReadResource("kubernetes:acme.cert-manager.io/v1alpha2:Challenge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Challenge resources.
type challengeState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *ChallengeSpec     `pulumi:"spec"`
	Status     *ChallengeStatus   `pulumi:"status"`
}

type ChallengeState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       ChallengeSpecPtrInput
	Status     ChallengeStatusPtrInput
}

func (ChallengeState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeState)(nil)).Elem()
}

type challengeArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *ChallengeSpec     `pulumi:"spec"`
	Status     *ChallengeStatus   `pulumi:"status"`
}

// The set of arguments for constructing a Challenge resource.
type ChallengeArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       ChallengeSpecPtrInput
	Status     ChallengeStatusPtrInput
}

func (ChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeArgs)(nil)).Elem()
}
